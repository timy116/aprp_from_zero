version: '3.9'

services:
  postgres:
    container_name: db
    image: postgres:14-alpine
    volumes:
      - pg-data:/var/lib/postgresql/data
    expose:
      - "5432"
    environment:
      - POSTGRES_DB=aprp
      - POSTGRES_HOST=localhost
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - aprp

  pgadmin:
    container_name: aprp_pgadmin
    image: dpage/pgadmin4:8.5
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pg-admin:/root/.pgadmin
    ports:
      - "5050:80"
    networks:
      - aprp
    restart: unless-stopped

  redis:
    container_name: redis
    hostname: redis
    image: redis:4.0
    volumes:
      - redis-data:/data
    networks:
      - aprp

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8085:8081"
    depends_on:
      - "redis"
    networks:
      - aprp
    restart: always

  web-prod: &web
    container_name: web-prod
    build:
      context: .
      target: prod
    #    env_file:
    #      - .env
    environment:
      - POSTGRES_DB=aprp
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=dashboard.settings.base
      - JUPYTER_ALLOW_INSECURE_WRITES=1
      - REDIS_HOST=redis
      - PID_FILE=/app/celeryd.pid
      # If we do not set the variable, the django-admin will not be able to find the settings file
      # and will raise the ModuleNotFoundError exception.
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app
    entrypoint: /app/scripts/entrypoint.sh
    command: >
      gunicorn -w 4 -b 0.0.0.0:8000 \
      --access-logfile - \
      --error-logfile - \
      --max-requests 1000 \
      --max-requests-jitter 100 \
      dashboard.wsgi
    #    restart: on-failure
    networks:
      - aprp

  worker:
    <<: *web
    container_name: worker
    ports: [ ]
    command:
      - "python"
      - "manage.py"
      - "start_celery_worker"

  beat:
    <<: *web
    container_name: beat
    ports: [ ]
    command:
      - "python"
      - "manage.py"
      - "start_celery_beat"

  flower:
    container_name: flower
    image: mher/flower
    ports:
      - "49555:5555"
    networks:
      - aprp
    depends_on:
      - worker
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1

  notebook:
    <<: *web
    container_name: notebook
    command:
      - python
      - manage.py
      - shell_plus
      - --notebook
    ports:
      - "8888:8888"

volumes:
  pg-data:
  redis-data:
  pg-admin:


networks:
  aprp:
    driver: bridge
